#!/bin/dash

# mygive-mark <assignment>
# Run marking tests for an assignment

# Check argument count
if [ $# -ne 1 ]; then
    echo "usage: mygive-mark <assignment>" >&2
    exit 1
fi

assignment="$1"

# Validate assignment name format
if ! echo "$assignment" | grep -q '^[a-z][a-zA-Z0-9_]*$'; then
    echo "mygive-mark: invalid assignment: $assignment" >&2
    exit 1
fi

# Check if assignment exists
if [ ! -d ".mygive/$assignment" ]; then
    echo "mygive-mark: assignment $assignment not found" >&2
    exit 1
fi

# Check if tests file exists (use for loop)
found_test_file=false
for f in ".mygive/$assignment/tests"/*.tests; do
    if [ -f "$f" ]; then
        found_test_file=true
        break
    fi
done
if [ "$found_test_file" = false ]; then
    echo "mygive-mark: no tests found for assignment $assignment" >&2
    exit 1
fi

# Create temporary directory
temp_dir=$(mktemp -d)
trap 'rm -rf "$temp_dir"' EXIT

# Extract tests file
tests_file=$(ls ".mygive/$assignment/tests"/*.tests | head -n 1)
tar -xf "$tests_file" -C "$temp_dir"

# Iterate over all students' submissions
for student_dir in ".mygive/$assignment/submissions"/*/; do
    if [ -d "$student_dir" ]; then
        zid=$(basename "$student_dir")
        
        # Get last submission
        last_submission=$(ls "$student_dir" | grep -E '^submission_[0-9]+$' | sort -n -t_ -k2 | tail -n 1)
        if [ -z "$last_submission" ]; then
            continue
        fi
        
        submission_num=$(echo "$last_submission" | sed 's/submission_//')
        submission_file="$student_dir/$last_submission"
        info_file="$student_dir/submission_${submission_num}_info"
        
        if [ ! -f "$submission_file" ] || [ ! -f "$info_file" ]; then
            continue
        fi
        
        filename=$(sed -n '1p' "$info_file")
        file_size=$(sed -n '2p' "$info_file")
        timestamp=$(sed -n '3p' "$info_file")
        
        echo "*** Student $zid - submission $submission_num: $filename $file_size bytes @ $timestamp"
        
        # Make file executable
        chmod +x "$submission_file"
        
        # Run marking tests
        passed=0
        failed=0
        total_marks=0
        earned_marks=0
        
        for test_dir in "$temp_dir"/*/; do
            if [ -d "$test_dir" ]; then
                test_name=$(basename "$test_dir")
                
                # Only run tests with marks file
                if [ -f "$test_dir/marks" ]; then
                    marks=$(cat "$test_dir/marks")
                    total_marks=$((total_marks + marks))
                    
                    # Prepare test arguments
                    args=""
                    if [ -f "$test_dir/arguments" ]; then
                        args=$(cat "$test_dir/arguments")
                    fi
                    
                    # Prepare stdin
                    stdin_file=""
                    if [ -f "$test_dir/stdin" ]; then
                        stdin_file="$test_dir/stdin"
                    fi
                    
                    # Prepare expected stdout and stderr
                    expected_stdout=""
                    expected_stderr=""
                    if [ -f "$test_dir/stdout" ]; then
                        expected_stdout=$(cat "$test_dir/stdout")
                    fi
                    if [ -f "$test_dir/stderr" ]; then
                        expected_stderr=$(cat "$test_dir/stderr")
                    fi
                    
                    # Prepare expected exit status
                    expected_exit=0
                    if [ -f "$test_dir/exit_status" ]; then
                        expected_exit=$(cat "$test_dir/exit_status")
                    fi
                    
                    # Prepare compare options
                    options=""
                    if [ -f "$test_dir/options" ]; then
                        options=$(cat "$test_dir/options")
                    fi
                    
                    # Run program
                    set -- $args
                    if [ -n "$stdin_file" ]; then
                        actual_output=$(cat "$stdin_file" | "$submission_file" "$@" 2>&1)
                    else
                        actual_output=$("$submission_file" "$@" 2>&1)
                    fi
                    actual_exit=$?
                    
                    # Separate stdout and stderr (simplified)
                    actual_stdout="$actual_output"
                    actual_stderr=""
                    
                    # Compare results
                    test_passed=true
                    
                    # Check exit status
                    if [ "$actual_exit" -ne "$expected_exit" ]; then
                        test_passed=false
                    fi
                    
                    # Check stdout
                    if [ -n "$expected_stdout" ]; then
                        if [ "$actual_stdout" != "$expected_stdout" ]; then
                            # Apply compare options
                            if echo "$options" | grep -q 'b'; then
                                # Ignore blank line differences
                                actual_stdout=$(echo "$actual_stdout" | grep -v '^$')
                                expected_stdout=$(echo "$expected_stdout" | grep -v '^$')
                            fi
                            if echo "$options" | grep -q 'c'; then
                                # Ignore case differences
                                actual_stdout=$(echo "$actual_stdout" | tr '[:upper:]' '[:lower:]')
                                expected_stdout=$(echo "$expected_stdout" | tr '[:upper:]' '[:lower:]')
                            fi
                            if echo "$options" | grep -q 'd'; then
                                # Only keep digits and newlines
                                actual_stdout=$(echo "$actual_stdout" | tr -cd '0-9\n')
                                expected_stdout=$(echo "$expected_stdout" | tr -cd '0-9\n')
                            fi
                            if echo "$options" | grep -q 'w'; then
                                # Ignore space and tab differences
                                actual_stdout=$(echo "$actual_stdout" | tr -s ' \t')
                                expected_stdout=$(echo "$expected_stdout" | tr -s ' \t')
                            fi
                            
                            if [ "$actual_stdout" != "$expected_stdout" ]; then
                                test_passed=false
                            fi
                        fi
                    else
                        # Expect no stdout output
                        if [ -n "$actual_stdout" ]; then
                            test_passed=false
                        fi
                    fi
                    
                    # Check stderr
                    if [ -n "$expected_stderr" ]; then
                        if [ "$actual_stderr" != "$expected_stderr" ]; then
                            test_passed=false
                        fi
                    else
                        # Expect no stderr output
                        if [ -n "$actual_stderr" ]; then
                            test_passed=false
                        fi
                    fi
                    
                    # Output result
                    if [ "$test_passed" = true ]; then
                        echo "* Test $test_name passed ($marks marks)."
                        passed=$((passed + 1))
                        earned_marks=$((earned_marks + marks))
                    else
                        echo "* Test $test_name failed ($marks marks)."
                        failed=$((failed + 1))
                    fi
                fi
            fi
        done
        
        echo "** $passed tests passed, $failed tests failed - mark: $earned_marks/$total_marks"
    fi
done 